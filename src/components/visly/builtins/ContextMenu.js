// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { useCallback, useEffect, useRef, useState } from "react";
import { exists } from "../_internal_utils";
import { MenuTriggerContext } from "./MenuTriggerContext";
import { Popover } from "./Popover";
export function ContextMenu(props) {
  const {
    menu,
    clickableRef,
    autoFocusFirst = false,
    containFocus = true,
    ...position
  } = props;
  const triggerRef = useRef(null);
  const [pos, setPos] = useState({
    x: -100,
    y: -100,
  });
  const [isOpen, setIsOpen] = useState(false);
  const close = useCallback(() => {
    setIsOpen(false);
  }, []);
  const open = useCallback(
    (event) => {
      const x = event.clientX;
      const y = event.clientY;
      setPos({
        x,
        y,
      });
      close();
      setIsOpen(true);
    },
    [close]
  );
  useEffect(() => {
    if (!exists(clickableRef)) {
      console.warn(
        "ContextMenu needs a ref `clickableRef` for the element that should open the menu on right-click"
      );
    }

    const element = clickableRef.current;

    if (!exists(element)) {
      return;
    }

    element.addEventListener("contextmenu", open);
    return () => {
      element.removeEventListener("contextmenu", open);
    };
  }, [clickableRef, open]);
  return (
    <>
      <div
        style={{
          position: "fixed",
          top: pos.y,
          left: pos.x,
        }}
        ref={triggerRef}
      />
      <MenuTriggerContext.Provider
        value={{
          menuProps: {},
          close,
        }}
      >
        <Popover
          triggerRef={triggerRef}
          isOpen={isOpen}
          onShouldClose={close}
          autoFocusFirst={autoFocusFirst}
          containFocus={containFocus}
          placement="bottom start"
          {...position}
        >
          {typeof menu === "function" ? menu(close) : menu}
        </Popover>
      </MenuTriggerContext.Provider>
    </>
  );
}
