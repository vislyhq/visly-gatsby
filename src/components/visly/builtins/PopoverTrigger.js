// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import {
  useOverlayTriggerState,
  useOverlayTrigger,
  useOverlayPosition,
  OverlayContainer,
  PressResponder,
  usePress,
  mergeProps,
} from "@visly/core";
import React, { useLayoutEffect, useRef } from "react";
import { exists } from "../_internal_utils";
import { PopoverInner } from "./Popover";
export const Pressable = React.forwardRef(({ children, ...props }, ref) => {
  const newRef = useRef();
  ref = exists(ref) ? ref : newRef;
  const { pressProps } = usePress({ ...props, ref });
  return children(
    mergeProps(pressProps, {
      innerRef: ref,
    })
  );
});
export function useOverlayProps(props) {
  const { state, position, triggerRef, overlayRef } = props;
  const { overlayProps: positionProps, updatePosition } = useOverlayPosition({
    targetRef: triggerRef,
    overlayRef,
    onClose: state.close,
    isOpen: state.isOpen,
    shouldFlip: true,
    ...position,
  });
  useLayoutEffect(() => {
    if (state.isOpen) {
      requestAnimationFrame(updatePosition);
    }
  }, [state.isOpen, updatePosition]);
  return positionProps;
}
export function PopoverTrigger(props) {
  const {
    button,
    content,
    autoFocusFirst = false,
    containFocus = true,
    onOpenChange,
    ...position
  } = props;
  const triggerRef = useRef(null);
  const overlayRef = useRef(null);
  const state = useOverlayTriggerState({
    onOpenChange,
  });
  const positionProps = useOverlayProps({
    state,
    position,
    overlayRef,
    triggerRef,
  });
  const { triggerProps, overlayProps } = useOverlayTrigger(
    {
      type: "dialog",
    },
    state,
    triggerRef
  );
  return (
    <>
      <PressResponder
        ref={triggerRef}
        onPress={state.toggle}
        isPressed={state.isOpen}
        {...triggerProps}
      >
        <Pressable>
          {(props) =>
            typeof button === "function"
              ? button(props, state.open)
              : React.cloneElement(button, props)
          }
        </Pressable>
      </PressResponder>
      {state.isOpen && (
        <OverlayContainer>
          <PopoverInner
            positionProps={positionProps}
            triggerProps={overlayProps}
            innerRef={overlayRef}
            isOpen={state.isOpen}
            onClose={state.close}
            autoFocusFirst={autoFocusFirst}
            containFocus={containFocus}
            {...position}
          >
            {typeof content === "function" ? content(state.close) : content}
          </PopoverInner>
        </OverlayContainer>
      )}
    </>
  );
}
