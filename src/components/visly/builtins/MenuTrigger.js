// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import {
  OverlayContainer,
  PressResponder,
  useMenuTriggerState,
  useMenuTrigger,
} from "@visly/core";
import React, { useRef } from "react";
import { MenuTriggerContext } from "./MenuTriggerContext";
import { PopoverInner } from "./Popover";
import { Pressable, useOverlayProps } from "./PopoverTrigger";
export function MenuTrigger(props) {
  const {
    button,
    content,
    autoFocusFirst = false,
    containFocus = true,
    onOpenChange,
    ...position
  } = props;
  const triggerRef = useRef(null);
  const overlayRef = useRef(null);
  const state = useMenuTriggerState({
    onOpenChange,
  });
  const positionProps = useOverlayProps({
    state,
    position,
    overlayRef,
    triggerRef,
  });
  const { menuTriggerProps, menuProps } = useMenuTrigger(
    {
      type: "menu",
    },
    state,
    triggerRef
  );
  return (
    <>
      <PressResponder
        ref={triggerRef}
        onPress={() => state.toggle()}
        isPressed={state.isOpen}
        {...menuTriggerProps}
      >
        <Pressable>
          {(props) =>
            typeof button === "function"
              ? button(props, state.open)
              : React.cloneElement(button, props)
          }
        </Pressable>
      </PressResponder>
      {state.isOpen && (
        <MenuTriggerContext.Provider
          value={{
            menuProps,
            close: state.close,
          }}
        >
          <OverlayContainer>
            <PopoverInner
              positionProps={positionProps}
              triggerProps={{}}
              innerRef={overlayRef}
              isOpen={state.isOpen}
              onClose={state.close}
              autoFocusFirst={autoFocusFirst}
              containFocus={containFocus}
              {...position}
            >
              {typeof content === "function" ? content(state.close) : content}
            </PopoverInner>
          </OverlayContainer>
        </MenuTriggerContext.Provider>
      )}
    </>
  );
}
