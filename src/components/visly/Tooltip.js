// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import "./textstyles/fonts.css";
import "./reset.css";
import "./Tooltip.css";
import React, { createContext, useContext } from "react";
import {
  exists,
  findSetVariantProps,
  makeCompositeDefaultProps,
} from "./_internal_utils";
import {
  SpacerPrimitive,
  TextPrimitive,
  IconPrimitive,
} from "./_internal_primitives";
import { TooltipArrow, TooltipRoot } from "./_internal_tooltip";
import * as icons from "./icons";

const styles = [
  {
    type: "default",
    layers: {
      "tooltip-root": {
        none: {
          arrowColor: "rgba(31,31,31,1)",
        },
      },
      "tooltip-text": {
        none: {
          text: "Tooltip",
        },
      },
      "6YiSBzRbky": {
        none: {
          icon: icons.heart,
          useMask: true,
        },
      },
    },
  },
  {
    type: "boolean",
    propName: "withIcon",
    layers: {},
  },
];

const defaultPropValues = [
  {
    type: "default",
    layers: {},
  },
  {
    type: "boolean",
    propName: "withIcon",
    layers: {},
  },
];

const variantPropTypes = [
  {
    type: "boolean",
    propName: "withIcon",
  },
];

export const TooltipContext = createContext(null);

function Tooltip(_props) {
  const defaults = useContext(TooltipContext);
  const props = { ...defaults, ..._props };
  const activeVariants = findSetVariantProps(variantPropTypes, props);
  const getCompositeDefaultProps = makeCompositeDefaultProps(
    defaultPropValues,
    activeVariants
  );
  return (
    <TooltipRoot
      {...props}
      key="tooltip-root"
      internal={{
        styles,
        projectId: "7X7HTLRqyD",
        layerId: "tooltip-root",
        scope: "4DM3A5kqKR",
        activeVariants,
      }}
      internalChildren={(getStyle) => (
        <>
          <TextPrimitive
            id={"Text_tooltip-text"}
            className={
              "__visly_reset_7X7HTLRqyD __visly_scope_4DM3A5kqKR_tooltip-text"
            }
            key={"tooltip-text"}
            text={
              exists(props.text) ? props.text : getStyle("tooltip-text", "text")
            }
            element={getStyle("tooltip-text", "htmlElement")}
          />
          <SpacerPrimitive
            id={"Spacer_UeGAyTmdqo"}
            className={
              "__visly_reset_7X7HTLRqyD __visly_scope_4DM3A5kqKR_UeGAyTmdqo"
            }
            key={"UeGAyTmdqo"}
          />
          <IconPrimitive
            id={"Icon_6YiSBzRbky"}
            className={
              "__visly_reset_7X7HTLRqyD __visly_scope_4DM3A5kqKR_6YiSBzRbky"
            }
            key={"6YiSBzRbky"}
            useMask={getStyle("6YiSBzRbky", "useMask")}
            src={
              exists(props.icon) ? props.icon : getStyle("6YiSBzRbky", "icon")
            }
          />
          <TooltipArrow
            className={
              "__visly_reset_7X7HTLRqyD __visly_scope_4DM3A5kqKR_tooltip-arrow"
            }
            key={"tooltip-arrow"}
          />
        </>
      )}
    >
      {props.children}
    </TooltipRoot>
  );
}

Tooltip.__variants = [
  {
    name: "withIcon",
    type: "variant",
  },
];

export default Tooltip;
