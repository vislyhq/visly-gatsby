// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import React, { useCallback, useRef } from "react";
import { combineRef, renderChildren } from "./_internal_utils";
import { mergeProps, useTextField } from "@visly/core";
import { usePrimitive } from "./_internal_usePrimitive";
import { useFormLabel } from "./_internal_formlabel";
export function TextAreaRoot(props) {
  const inputRef = useRef();
  const { children, placeholder, disabled, resize = "both" } = props;
  const containerRef = useRef(null);
  const {
    style,
    testId,
    innerRef,
    values,
    vislyProps,
    isDisabled,
    handlers,
  } = usePrimitive({
    ref: containerRef,
    props,
  });
  const { fieldProps, label } = useFormLabel();
  const { inputProps } = useTextField(
    { ...props, isDisabled, inputElementType: "textarea", label },
    inputRef
  );
  const handleClickOnInnerElements = useCallback(() => {
    inputRef.current.focus();
  }, []);
  return (
    <div
      style={{
        position: "relative",
        display: "flex",
        width: "100%",
      }}
      ref={containerRef}
      {...handlers}
      onClick={handleClickOnInnerElements}
    >
      <textarea
        {...mergeProps(vislyProps, inputProps)}
        data-testid={testId}
        ref={combineRef(props.measureRef, combineRef(inputRef, innerRef))}
        placeholder={placeholder}
        disabled={disabled}
        style={{
          ...style,
          resize,
          overflow: "hidden",
          display: "inline-block",
        }}
        {...fieldProps}
      />
      <div
        style={{
          display: "contents",
        }}
        className={vislyProps.className}
      >
        {renderChildren(children, values)}
      </div>
    </div>
  );
}
