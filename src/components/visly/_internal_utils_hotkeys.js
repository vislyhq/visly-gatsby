// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
/* tslint:disable */
/* eslint-disable */
import { useMemo, useCallback } from "react";
import { exists } from "./_internal_utils";

function isInput(element) {
  if (element instanceof HTMLElement) {
    return (
      element instanceof HTMLInputElement ||
      element instanceof HTMLTextAreaElement ||
      element.isContentEditable
    );
  } else {
    return false;
  }
}

export function mergeHotkeys(hotkeys) {
  const onKeyDown = (event) => {
    for (const hotkey of hotkeys) {
      hotkey.onKeyDown(event);
    }
  };

  const onKeyUp = (event) => {
    for (const hotkey of hotkeys) {
      hotkey.onKeyUp(event);
    }
  };

  return {
    onKeyDown,
    onKeyUp,
  };
}
export function useHotkey(_hotkey, _handler, deps) {
  const hotkey = useMemo(() => _hotkey, deps);
  const handler = useCallback(_handler, deps);
  const events = useMemo(() => {
    let keyup;

    const onKeyDown = (event) => {
      if (exists(hotkey.disabled) && hotkey.disabled) {
        return;
      }

      if (!hotkey.repeat && event.repeat) {
        return;
      }

      if (!hotkey.allowInput && isInput(event.target)) {
        return;
      }

      const {
        key,
        meta = false,
        shift = false,
        alt = false,
        ctrl = false,
      } = hotkey;
      const keyMatch =
        event.key.toLowerCase() === key.toLowerCase() ||
        (event.keyCode === 32 && key.toLowerCase() === "space");

      if (
        keyMatch &&
        event.metaKey === meta &&
        event.shiftKey === shift &&
        event.ctrlKey === ctrl &&
        event.altKey === alt
      ) {
        event.stopPropagation();
        event.preventDefault();
        const result = handler(event);

        if (exists(result) && result instanceof Function) {
          keyup = result;
        } else {
          keyup = () => {};
        }
      }
    };

    const onKeyUp = (event) => {
      if (exists(keyup)) {
        event.stopPropagation();
        event.preventDefault();
        keyup(event);
      }
    };

    return {
      onKeyDown,
      onKeyUp,
    };
  }, [hotkey, handler]);
  return events;
}
